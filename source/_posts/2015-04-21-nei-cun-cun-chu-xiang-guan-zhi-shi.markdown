---
layout: post
title: "内存存储相关知识及static和extern关键字的使用"
date: 2015-04-21 17:10:27 +0800
comments: true
categories: 
---
####一、程序的内存分配
######1、栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
######2、堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。
######3、全局区（静态区）（static）— 所有的全局变量都是静态变量、被关键字static修饰的局部变量也是静态变量`不改变其作用域`

	#include <stdio.h>
    int a;
    void test() {
        static int b = 0;
        b++;
        
        int c = 0;
        c++;
        
        printf("b=%d, c=%d \n", b, c);
    }
    int main() {
        int i;
        // 连续调用3次test函数
        for (i = 0; i<3; i++) {
            test();
        }
        
        return 0;
    }
	* 第3行的变量a、第6行的变量b都是静态变量，第9行的变量c、第16行的变量i是自动变量。
	* 因为第6行的变量b是静态变量，所以它只会被创建一次，而且生命周期会延续到程序结束。因为它只会创建一次，所以第6行代码只会执行一次，下次再调用test函数时，变量b的值不会被重新初始化为0。
######4、文字常量区—常量字符串就是放在这里的。 程序结束后由系统释放
######5、程序代码区—存放函数体的二进制代码。

####二、static和extern关键字的使用
####static和extern对函数的作用
######1、外部、内部函数
（1）外部函数：如果在当前文件中定义的函数允许其他文件访问、调用，就称为外部函数。C语言规定，不允许有同名的外部函数。
	
（2）内部函数：如果在当前文件中定义的函数不允许其他文件访问、调用，只能在内部使用，就称为内部函数。C语言规定不同的源文件可以有同名的内部函数，并且互不干扰。

######2、static和extern对函数的作用
（1）extern用来修饰外部函数，`extern跟auto关键字一样废，完全可以省略，因为默认情况下，所有的函数就是外部函数。`
extern关键字对函数的作用：用来定义和声明一个外部函数。其实extern又跟auto一样废，完全可以省略。

	void one();  // 等同于extern void one();
	int main(){
	one();
	return 0;
	}

（2）在定义函数时，在函数的最左边加上static可以把该函数声明为内部函数(又叫静态函数)，这样该函数就只能在其定义所在的文件中使用。如果在不同的文件中有同名的内部函数，则互不干扰。`static也可以用来声明一个内部函数`

####static和extern对变量的作用
1.extern可以用来声明一个全局变量，但是不能用来定义变量

2.默认情况下，一个全局变量是可以供多个源文件共享的，也就说，多个源文件中同名的全局变量都代表着同一个变量

3.如果在定义全局变量的时候加上static关键字，此时static的作用在于限制该全局变量的作用域，只能在定义该全局变量的文件中才能使用，跟其他源文件中的同名变量互不干扰

